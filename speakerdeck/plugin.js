// Generated by CoffeeScript 1.5.0

Wistia.plugin('speakerdeck', function(video, options) {
  var Timings, aspect, deckElem, height, numberOfSlides, position, ready, readyCallback, slideChange, speakerDeck, suppressSlideSync, suppressSlideSyncTemporarily, timings, updateSlideForTime, updateTimings, width;
  Timings = (function() {

    function Timings(pairs) {
      this.pairs = pairs || [];
      this.reversePairs = this.pairs.reverse();
    }

    Timings.prototype.slideForTime = function(time) {
      var pair, _i, _len, _ref;
      _ref = this.reversePairs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (time >= pair[1]) {
          return pair[0];
        }
      }
      return null;
    };

    Timings.prototype.timeForSlide = function(slide) {
      var pair, _i, _len, _ref;
      _ref = this.pairs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pair = _ref[_i];
        if (slide === pair[0]) {
          return pair[1];
        }
      }
      return null;
    };

    return Timings;

  })();
  timings = new Timings();
  updateTimings = function(pairs) {
    timings = new Timings(pairs);
    return updateSlideForTime();
  };
  slideChange = function(slide) {
    var time;
    if (!(video.state() === 'playing' || video.state() === 'paused')) {
      return;
    }
    if (suppressSlideSync) {
      return;
    }
    suppressSlideSyncTemporarily();
    time = timings.timeForSlide(slide);
    if (time != null) {
      return video.time(time);
    }
  };
  speakerDeck = null;
  numberOfSlides = null;
  readyCallback = null;
  ready = false;
  window.onSpeakerDeckPlayerReady = function(s) {
    speakerDeck = s;
    suppressSlideSyncTemporarily();
    speakerDeck.goToSlide(10000);
    setTimeout(function() {
      if (speakerDeck.currentSlide) {
        numberOfSlides = speakerDeck.currentSlide.number;
      }
      return speakerDeck.goToSlide(1);
    }, 10);
    speakerDeck.on('change', function(slide) {
      return slideChange(slide.number);
    });
    ready = true;
    if (readyCallback) {
      return readyCallback();
    }
  };
  Wistia.remote.script('//speakerdeck.com/assets/embed.js');
  suppressSlideSync = false;
  suppressSlideSyncTemporarily = function() {
    suppressSlideSync = true;
    return setTimeout(function() {
      return suppressSlideSync = false;
    }, 100);
  };
  updateSlideForTime = function(t) {
    var slideNum;
    if (!speakerDeck) {
      return;
    }
    if (t == null) {
      t = video.time();
    }
    slideNum = timings.slideForTime(t);
    if (speakerDeck.currentSlide.number !== slideNum) {
      suppressSlideSyncTemporarily();
      return speakerDeck.goToSlide(slideNum);
    }
  };
  video.bind('timechange', updateSlideForTime);
  position = options.position || 'right';
  width = options.width || video.width();
  height = options.height || video.height();
  aspect = options.aspect || (4 / 3);
  deckElem = document.createElement('div');
  deckElem.innerHTML = "<div class='speakerdeck-embed' data-ratio='" + aspect + "' data-id='" + options.deckId + "'></div>";
  deckElem.style.width = "" + width + "px";
  deckElem.style.height = "" + height + "px";
  video.grid[position].appendChild(deckElem);
  video.fit();
  return {
    updateTimings: updateTimings,
    numberOfSlides: function() {
      return numberOfSlides;
    },
    currentSlide: function() {
      return speakerDeck.currentSlide.number;
    },
    ready: function(callback) {
      if (ready) {
        return callback();
      } else {
        return readyCallback = callback;
      }
    }
  };
});
