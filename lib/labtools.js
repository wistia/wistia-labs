// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

(function(W, $) {
  if (W.EmbedCode) {
    return;
  }
  W.EmbedCode = (function() {

    function EmbedCode() {
      throw "You must either use EmbedCode.parse(embedCode) or specify IframeEmbedCode/ApiEmbedCode.";
    }

    EmbedCode.prototype.toString = function() {
      return this._embedCode;
    };

    EmbedCode.prototype.previewInElem = function(targetElem, options, callback) {
      var embedCode;
      if (options == null) {
        options = {};
      }
      if (typeof targetElem === 'string') {
        targetElem = document.getElementById(targetElem);
      }
      embedCode = this.toString();
      if (options.type === 'api') {
        this.fromOembed({
          embedType: 'api'
        }, function(data) {
          window.previewCode = W.EmbedCode.parse(data.html);
          previewCode.handle("window.previewEmbed = " + previewCode.handle());
          targetElem.innerHTML = W.util.removeScriptTags(previewCode.toString());
          return W.util.execScriptTags(previewCode.toString(), callback);
        });
      } else if (window.previewCode = W.EmbedCode.parse(embedCode)) {
        if (previewCode instanceof W.ApiEmbedCode) {
          previewCode.handle("window.previewEmbed = " + previewCode.handle());
          targetElem.innerHTML = W.util.removeScriptTags(previewCode.toString());
          W.util.execScriptTags(previewCode.toString());
        } else if (previewCode instanceof W.IframeEmbedCode) {
          targetElem.innerHTML = W.util.removeScriptTags(previewCode.toString());
          W.util.execScriptTags(previewCode.toString());
        } else if (previewCode instanceof W.PopoverEmbedCode) {
          this.fromOembed({
            embedType: 'iframe',
            autoPlay: false
          }, function(data) {
            targetElem.innerHTML = W.util.removeScriptTags(previewCode.toString()) + "<br/>" + data.html;
            return W.util.execScriptTags(previewCode.toString());
          });
        }
      } else {
        if (typeof console !== "undefined" && console !== null) {
          console.log("There was an error parsing the preview code:", embedCode);
        }
      }
      return this;
    };

    EmbedCode.prototype.setOption = function(key, val) {
      var newOptions;
      newOptions = W.extend({}, this._options);
      W.obj.set(newOptions, key, val);
      this.options(newOptions);
      return this;
    };

    EmbedCode.prototype.extendOption = function(key, val) {
      var newOptions, subSet;
      newOptions = W.extend({}, this._options);
      if (subSet = W.obj.get(newOptions, key)) {
        W.extend(subSet, val);
      } else {
        W.obj.set(newOptions, key, val);
      }
      this.options(newOptions);
      return this;
    };

    EmbedCode.prototype.removeOption = function(key) {
      var newOptions;
      newOptions = W.extend({}, this._options);
      W.obj.unset(newOptions, key);
      this.options(newOptions);
      return this;
    };

    EmbedCode.prototype.options = function(newOptions) {
      if (newOptions != null) {
        return W.extend(this._options, newOptions);
      } else {
        return W.extend({}, this._options);
      }
    };

    EmbedCode.prototype._castOptions = function() {
      var playerColor;
      playerColor = this._options.playerColor || '';
      W.obj.castDeep(this._options);
      if (playerColor) {
        return this._options.playerColor = playerColor;
      }
    };

    EmbedCode.prototype.fromOembed = function(options, callback) {
      options = W.extend({
        height: this.height(),
        ssl: this.ssl(),
        width: this.width()
      }, this.options(), options);
      return W.EmbedCode.fromOembed(this.hashedId(), options, callback);
    };

    EmbedCode.prototype._oembedOptions = function() {
      return W.extend({
        ssl: this.ssl()
      }, this.options());
    };

    EmbedCode.prototype.ssl = function() {
      return false;
    };

    EmbedCode.prototype.proto = function() {
      if (this.ssl()) {
        return "https:";
      } else {
        return "http:";
      }
    };

    EmbedCode.prototype.isValid = function() {
      return false;
    };

    EmbedCode.prototype.hashedId = function(h) {};

    EmbedCode.prototype.width = function(w) {};

    EmbedCode.prototype.height = function(h) {};

    return EmbedCode;

  })();
  W.EmbedCode.fromOembed = function(hashedId, options, callback) {
    if (options == null) {
      options = {};
    }
    return $.getJSON("" + window.location.protocol + "//" + W.constant.oembedHost + "/oembed.json?callback=?", {
      url: W.EmbedCode.oembedUrl(hashedId, options)
    }, function(json) {
      return callback(json);
    });
  };
  W.EmbedCode.oembedUrl = function(hashedId, options) {
    if (options == null) {
      options = {};
    }
    return "" + (options.ssl ? "https:" : "http:") + "//" + W.constant.embedHost + "/embed/medias/" + hashedId + "?" + (W.url.jsonToParams(options));
  };
  W.EmbedCode.parse = function(embedCode) {
    if (W.EmbedCode.isIframe(embedCode)) {
      return W.IframeEmbedCode.parse(embedCode);
    } else if (W.EmbedCode.isPopover(embedCode)) {
      return W.PopoverEmbedCode.parse(embedCode);
    } else if (W.EmbedCode.isApi(embedCode)) {
      return W.ApiEmbedCode.parse(embedCode);
    } else {
      return null;
    }
  };
  W.EmbedCode.isIframe = function(embedCode) {
    if (embedCode instanceof W.IframeEmbedCode && embedCode.isValid()) {
      return true;
    }
    try {
      return new W.IframeEmbedCode(embedCode).isValid();
    } catch (e) {
      return false;
    }
  };
  W.EmbedCode.isApi = function(embedCode) {
    if (embedCode instanceof W.ApiEmbedCode && embedCode.isValid()) {
      return true;
    }
    try {
      return new W.ApiEmbedCode(embedCode).isValid();
    } catch (e) {
      return false;
    }
  };
  W.EmbedCode.isPopover = function(embedCode) {
    if (embedCode instanceof W.PopoverEmbedCode && embedCode.isValid()) {
      return true;
    }
    try {
      return new W.PopoverEmbedCode(embedCode).isValid();
    } catch (e) {
      return false;
    }
  };
  W.EmbedCode.isValid = function(embedCode) {
    var _ref;
    return !!((_ref = W.EmbedCode.parse(embedCode)) != null ? _ref.isValid() : void 0);
  };
  W.PopoverEmbedCode = (function(_super) {

    __extends(PopoverEmbedCode, _super);

    function PopoverEmbedCode(embedCode) {
      if (embedCode) {
        this.parse(embedCode);
      }
    }

    PopoverEmbedCode.prototype.parse = function(embedCode) {
      var key, match, matches, val, _i, _len, _ref, _ref1;
      this._$popoverFrag = $("<div>");
      this._$popoverFrag.html(W.util.removeScriptTags(embedCode));
      this._$popover = this._$popoverFrag.find("[class*=wistia-popover]");
      this._rawHref = this._$popover.attr('href');
      this._hrefUrl = W.url.parse(this._rawHref);
      this._options = W.extend({}, this._hrefUrl.params);
      this._config = {};
      if (matches = this._$popover.attr('class').match(/wistia-popover(?:\[([^\]]+)\])?/)) {
        _ref = matches[1].split(',');
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          match = _ref[_i];
          _ref1 = match.split('='), key = _ref1[0], val = _ref1[1];
          W.obj.set(this._config, key, val);
        }
      }
      this._width = parseInt(this._config.width, 10);
      this._height = parseInt(this._config.height, 10);
      this._scripts = W.util.scriptTags(embedCode);
      this._castOptions();
      return this._embedCode = this._$popoverFrag.html().replace(/\s+$/g, "") + "\n" + this._scripts.join("\n");
    };

    PopoverEmbedCode.prototype.options = function(newOptions) {
      var newSrc;
      if (newOptions) {
        newSrc = this._hrefUrl.clone();
        newSrc.params = newOptions;
        this._$popover.attr('href', newSrc.absolute());
        this.parse(this._$popoverFrag.html() + this._scripts.join("\n"));
        return this;
      } else {
        return W.extend({}, this._options);
      }
    };

    PopoverEmbedCode.prototype.isValid = function() {
      var _ref;
      return ((_ref = this._$popover) != null ? _ref.length : void 0) && this._width && this._height && this._options;
    };

    PopoverEmbedCode.prototype.hashedId = function(h) {
      if (h != null) {
        this._hrefUrl.path[this._hrefUrl.path.length - 1] = h;
        this._$popover.attr("href", this._hrefUrl.absolute());
        this.parse(this._$popoverFrag.html());
        return this;
      } else {
        return this._hrefUrl.path[this._hrefUrl.path.length - 1];
      }
    };

    PopoverEmbedCode.prototype._classConfig = function() {
      var key, val;
      return ((function() {
        var _ref, _results;
        _ref = this._config;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          _results.push("" + key + "=" + val);
        }
        return _results;
      }).call(this)).join(",");
    };

    PopoverEmbedCode.prototype.width = function(w) {
      if (w != null) {
        this._config.width = w;
        this._$popover.attr('class', this._classConfig());
        this.parse(this._$popoverFrag.html());
        return this;
      } else {
        return this._width;
      }
    };

    PopoverEmbedCode.prototype.height = function(h) {
      if (h != null) {
        this._config.height = h;
        this._$popover.attr('class', this._classConfig());
        this.parse(this._$popoverFrag.html());
        return this;
      } else {
        return this._height;
      }
    };

    PopoverEmbedCode.prototype.ssl = function() {
      return this._hrefUrl.protocol === "https:";
    };

    PopoverEmbedCode.prototype.toString = function() {
      return this._embedCode.replace(/&amp;/g, "&");
    };

    return PopoverEmbedCode;

  })(W.EmbedCode);
  W.PopoverEmbedCode.parse = function(embedCode) {
    return new W.PopoverEmbedCode(embedCode);
  };
  W.IframeEmbedCode = (function(_super) {

    __extends(IframeEmbedCode, _super);

    function IframeEmbedCode(embedCode) {
      if (embedCode) {
        this.parse(embedCode);
      }
    }

    IframeEmbedCode.prototype.parse = function(embedCode) {
      this._$iframeFrag = $("<div>");
      this._$iframeFrag.html(W.util.removeScriptTags(embedCode));
      this._$iframe = this._$iframeFrag.find("iframe.wistia_embed:first");
      this._rawSrc = this._$iframe.attr('src');
      this._srcUrl = W.url.parse(this._rawSrc);
      this._options = W.extend({}, this._srcUrl.params);
      this._width = parseInt(this._$iframe.attr('width'), 10);
      this._height = parseInt(this._$iframe.attr('height'), 10);
      this._castOptions();
      return this._embedCode = this._$iframeFrag.html();
    };

    IframeEmbedCode.prototype.options = function(newOptions) {
      var newSrc;
      if (newOptions) {
        newSrc = this._srcUrl.clone();
        newSrc.params = newOptions;
        this._$iframe.attr('src', newSrc.absolute());
        this.parse(this._$iframeFrag.html());
        return this;
      } else {
        return W.extend({}, this._options);
      }
    };

    IframeEmbedCode.prototype.isValid = function() {
      var _ref;
      return ((_ref = this._$iframe) != null ? _ref.length : void 0) && this._width && this._height && this._options;
    };

    IframeEmbedCode.prototype.hashedId = function(h) {
      if (h != null) {
        this._srcUrl.path[this._srcUrl.path.length - 1] = h;
        this._$iframe.attr("src", this._srcUrl.absolute());
        this.parse(this._$iframeFrag.html());
        return this;
      } else {
        return this._srcUrl.path[this._srcUrl.path.length - 1];
      }
    };

    IframeEmbedCode.prototype.width = function(w) {
      if (w != null) {
        this._$iframe.attr('width', w);
        this.parse(this._$iframeFrag.html());
        return this;
      } else {
        return this._width;
      }
    };

    IframeEmbedCode.prototype.height = function(h) {
      if (h != null) {
        this._$iframe.attr('height', h);
        this.parse(this._$iframeFrag.html());
        return this;
      } else {
        return this._height;
      }
    };

    IframeEmbedCode.prototype.ssl = function() {
      return this._srcUrl.protocol === "https:";
    };

    IframeEmbedCode.prototype.toString = function() {
      return this._embedCode.replace(/&amp;/g, "&");
    };

    return IframeEmbedCode;

  })(W.EmbedCode);
  W.IframeEmbedCode.parse = function(embedCode) {
    return new W.IframeEmbedCode(embedCode);
  };
  W.ApiEmbedCode = (function(_super) {

    __extends(ApiEmbedCode, _super);

    function ApiEmbedCode(embedCode) {
      if (embedCode) {
        this.parse(embedCode);
      }
    }

    ApiEmbedCode.prototype.parse = function(embedCode) {
      this._embedCodeFrag = $("<div>");
      this._rawEmbedCode = embedCode;
      this._rawHtml = W.util.removeScriptTags(embedCode).replace(/\n+$/g, "\n");
      this._embedCodeFrag.html(this._rawHtml);
      this._containerElem = this._embedCodeFrag.find(".wistia_embed:first");
      this._containerId = this._containerElem.attr("id");
      this._containerContents = this._containerElem.html();
      this._containerHtml = $("<div>").html(this._containerElem.clone()).html();
      this._handle = W.ApiEmbedCode.handle(this._rawEmbedCode);
      this._hashedId = W.ApiEmbedCode.hashedId(this._rawEmbedCode);
      this._rawOptions = W.ApiEmbedCode.rawOptions(this._rawEmbedCode);
      this._options = W.ApiEmbedCode.parseOptions(this._rawOptions);
      this._html = W.util.removeScriptTags(this._rawEmbedCode);
      this._scripts = W.util.scriptTags(this._rawEmbedCode);
      this._embedCode = this._embedCodeFrag.html().replace(/\s+$/g, "") + "\n" + this._scripts.join("\n");
      return this;
    };

    ApiEmbedCode.prototype.options = function(newOptions) {
      var newRawOptions;
      if (newOptions != null) {
        newRawOptions = W.ApiEmbedCode.evilJsonStringify(newOptions);
        this.parse(this._rawEmbedCode.replace(this._rawOptions, newRawOptions));
        return this;
      } else {
        return W.extend({}, this._options);
      }
    };

    ApiEmbedCode.prototype.containerId = function(newContainerId) {
      if (newContainerId != null) {
        this.setOption('container', newContainerId);
        this._containerElem.attr("id", newContainerId);
        this.parse(this._embedCodeFrag.html() + this._scripts.join("\n"));
        return this;
      } else {
        return this._containerId;
      }
    };

    ApiEmbedCode.prototype.containerContents = function(newContents) {
      if (newContents != null) {
        this._containerElem.html(newContents);
        this.parse(this._embedCodeFrag.html() + this._scripts.join("\n"));
        return this;
      } else {
        return this._containerContents;
      }
    };

    ApiEmbedCode.prototype.containerHtml = function() {
      return this._containerHtml;
    };

    ApiEmbedCode.prototype.handle = function(newHandle) {
      var matches;
      if (newHandle != null) {
        matches = this._embedCode.match(W.ApiEmbedCode.rhandle);
        this.parse(this._embedCode.replace(matches[0], matches[0].replace(this._handle, newHandle)));
        return this;
      } else {
        return this._handle;
      }
    };

    ApiEmbedCode.prototype.hashedId = function(newHashedId) {
      if (newHashedId != null) {
        this.parse(this._embedCode.replace(matches[0], matches[0].replace(this._hashedId, newHashedId)));
        return this;
      } else {
        return this._hashedId;
      }
    };

    ApiEmbedCode.prototype.css = function(prop, val) {
      if (val != null) {
        this._containerElem.css(prop, val);
        this.parse(this._embedCodeFrag.html() + this._scripts.join("\n"));
        return this;
      } else {
        return this._containerElem.css(prop);
      }
    };

    ApiEmbedCode.prototype.width = function(w) {
      if (w != null) {
        this.css('width', w);
        return this;
      } else {
        return this.css('width');
      }
    };

    ApiEmbedCode.prototype.height = function(h) {
      if (h != null) {
        this.css('height', h);
        return this;
      } else {
        return this.css('height');
      }
    };

    ApiEmbedCode.prototype.hashedId = function() {
      return this._hashedId;
    };

    ApiEmbedCode.prototype.ssl = function() {
      var scriptTag, _i, _len, _ref;
      _ref = W.util.scriptTags(this._rawEmbedCode);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        scriptTag = _ref[_i];
        if (/src\s*=\s*['"]https:/i.test(scriptTag)) {
          return true;
        }
      }
      return false;
    };

    ApiEmbedCode.prototype.isValid = function() {
      return this._containerId && this._handle && this._hashedId && this._options && this.height() && this.width();
    };

    ApiEmbedCode.prototype.fromOembed = function(options, callback) {
      options = W.extend({
        handle: this.handle(),
        height: this.height(),
        ssl: this.ssl(),
        width: this.width()
      }, this.options(), options);
      return W.EmbedCode.fromOembed(this.hashedId(), options, callback);
    };

    return ApiEmbedCode;

  })(W.EmbedCode);
  W.ApiEmbedCode.parse = function(embedCode) {
    return new W.ApiEmbedCode(embedCode);
  };
  W.ApiEmbedCode.roptions = /Wistia\.embed\(.+?,\s*([\s\S]+)\s*\)/;
  W.ApiEmbedCode.rhandle = /<script>\s*([^=]+?)\s*?=\s*Wistia\.embed\(/;
  W.ApiEmbedCode.rhashedid = /Wistia\.embed\("(\w+)"/;
  W.ApiEmbedCode.handle = function(embedCode) {
    var matches;
    if (matches = embedCode.match(W.ApiEmbedCode.rhandle)) {
      return matches[1];
    } else {
      return null;
    }
  };
  W.ApiEmbedCode.hashedId = function(embedCode) {
    var matches;
    if (matches = embedCode.match(W.ApiEmbedCode.rhashedid)) {
      return matches[1];
    } else {
      return null;
    }
  };
  W.ApiEmbedCode.rawOptions = function(embedCode) {
    var matches;
    if (matches = embedCode.match(W.ApiEmbedCode.roptions)) {
      return matches[1];
    } else {
      return null;
    }
  };
  W.ApiEmbedCode.parseOptions = function(rawOptions) {
    try {
      return eval("(" + rawOptions + ")");
    } catch (e) {
      if (typeof console !== "undefined" && console !== null) {
        console.log(matches[1]);
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log(e.stack);
      }
      return null;
    }
  };
  W.ApiEmbedCode.evilJsonStringify = function(h) {
    var evilObj, result;
    evilObj = W.ApiEmbedCode.evilDeepCopy(h, {
      prefix: '_OQ_',
      suffix: '_CQ_'
    });
    result = W.JSON.stringify(evilObj, null, 2);
    result = result.replace(/"_OQ_(.*?[\-\.\#\@\%\^\&\*\(\)].*?)_CQ_"/g, "\"$1\"");
    result = result.replace(/"_OQ_/g, "");
    result = result.replace(/_CQ_"/g, "");
    return result;
  };
  return W.ApiEmbedCode.evilDeepCopy = function(h, options) {
    var key, newKey, newVal, result, val;
    options = W.extend({
      prefix: "",
      suffix: ""
    }, options);
    if (W.obj.isObject(h)) {
      result = {};
    } else if (W.obj.isArray(h)) {
      result = [];
    }
    for (key in h) {
      val = h[key];
      if (W.obj.isObject(val) || W.obj.isArray(val)) {
        newVal = W.ApiEmbedCode.evilDeepCopy(val, options);
      } else {
        newVal = val;
      }
      newKey = options.prefix + key + options.suffix;
      if (W.obj.isArray(result)) {
        result.push(newVal);
      } else {
        result[newKey] = newVal;
      }
    }
    return result;
  };
})(Wistia, jQuery);
